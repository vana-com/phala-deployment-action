# action.yml
name: 'Vana Phala Deployment'
description: 'Deploys a CVM to Phala Cloud using a Python script.'
author: 'Volodymyr Isai <volod@opendatalabs.xyz>'
branding:
  icon: 'cloud-lightning'
  color: 'purple'

inputs:
  phala-cloud-api-key:
    description: 'The API key for authenticating with the Phala Cloud API.'
    required: true
  vm-name:
    description: 'Name for the CVM. Defaults to the GitHub repository name if not provided.'
    required: false
  vm-id:
    description: 'The ID of an existing VM to update. If provided, the action performs an update instead of creating a new VM.'
    required: false
  image:
    description: 'The base image to use for the CVM (e.g., dstack-dev-0.3.5).'
    required: false
    default: 'dstack-dev-0.3.5'
  docker-compose-file:
    description: 'Path to the Docker Compose file for the TEE, relative to the root of the user repository.'
    required: true
    default: 'docker-compose.phala.yml'
  docker-tag:
    description: 'The tag for the Docker image specified in the compose file.'
    required: false
    default: 'latest'
  prelaunch-script-file:
    description: 'Optional path to a pre-launch script to be executed inside the CVM, relative to the root of the user repository.'
    required: false
  teepod-id:
    description: 'Specific Teepod ID to deploy to. If omitted, an available one will be selected automatically.'
    required: false
  vcpu:
    description: 'Number of virtual CPUs for the CVM.'
    required: false
    default: '2'
  memory:
    description: 'Memory in MB for the CVM.'
    required: false
    default: '8192'
  disk-size:
    description: 'Disk size in GB for the CVM.'
    required: false
    default: '40'
  env-vars-to-encrypt:
    description: >
      A JSON array of environment variable names to be encrypted and passed to the CVM.
      Example: '["API_KEY", "DB_PASSWORD"]'
    required: false
    default: '[]'

outputs:
  vm-id:
    description: 'The ID of the created or updated CVM.'
  vm-name:
    description: 'The name of the CVM.'
  status:
    description: 'The final status of the deployment (e.g., "success", "failed").'
  operation:
    description: 'The operation performed ("create" or "update_skipped").'

runs:
  using: 'composite'
  steps:
    - name: Checkout User Repository
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install Action Dependencies
      shell: bash
      run: |
        pip install poetry
        poetry install --no-root
      working-directory: ${{ github.action_path }}

    - name: Run Phala Deployment Script
      id: deploy
      shell: bash
      env:
        # Map all action inputs to environment variables for the Python script.
        PHALA_CLOUD_API_KEY: ${{ inputs.phala-cloud-api-key }}
        INPUT_VM_NAME: ${{ inputs.vm-name || github.event.repository.name }}
        INPUT_VM_ID: ${{ inputs.vm-id }}
        INPUT_IMAGE: ${{ inputs.image }}
        INPUT_DOCKER_COMPOSE_FILE: ${{ inputs.docker-compose-file }}
        INPUT_DOCKER_TAG: ${{ inputs.docker-tag }}
        INPUT_PRELAUNCH_SCRIPT_FILE: ${{ inputs.prelaunch-script-file }}
        INPUT_TEEPOD_ID: ${{ inputs.teepod-id }}
        INPUT_VCPU: ${{ inputs.vcpu }}
        INPUT_MEMORY: ${{ inputs.memory }}
        INPUT_DISK_SIZE: ${{ inputs.disk-size }}
        INPUT_ENV_VARS_TO_ENCRYPT: ${{ inputs.env-vars-to-encrypt }}
        # The calling workflow's 'env' block will add the actual secret values here.
      run: |
        python -m poetry run python ${{ github.action_path }}/deploy_to_phala.py